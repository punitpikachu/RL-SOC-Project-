import pygame
import random
import sys


pygame.init()


# Screen setup
WIDTH, HEIGHT = 600, 400
BLOCK_SIZE = 20
FONT = pygame.font.SysFont('arial', 24)
LARGE_FONT = pygame.font.SysFont('arial', 36)


# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (213, 50, 80)
GREEN = (0, 255, 0)
BLUE = (50, 153, 213)
GREY = (200, 200, 200)


# Difficulty levels
DIFFICULTY = {
   'Easy': 8,
   'Medium': 15,
   'Hard': 25
}


class Snake:
   def __init__(self):
       self.body = [[WIDTH // 2, HEIGHT // 2]]
       self.direction = [0, 0]
       self.length = 1


   def move(self):
       head = [self.body[-1][0] + self.direction[0], self.body[-1][1] + self.direction[1]]
       self.body.append(head)
       if len(self.body) > self.length:
           del self.body[0]


   def grow(self):
       self.length += 1


   def check_collision(self):
       head = self.body[-1]
       return (
           head in self.body[:-1] or
           head[0] < 0 or head[0] >= WIDTH or
           head[1] < 0 or head[1] >= HEIGHT
       )


   def draw(self, surface):
       for i, block in enumerate(self.body):
           color = BLUE if i == len(self.body) - 1 else BLACK
           pygame.draw.rect(surface, color, (*block, BLOCK_SIZE, BLOCK_SIZE), border_radius=4)


   def get_head(self):
       return self.body[-1]


class Food:
   def __init__(self):
       self.position = [
           random.randrange(0, WIDTH, BLOCK_SIZE),
           random.randrange(0, HEIGHT, BLOCK_SIZE)
       ]


   def respawn(self):
       self.__init__()


   def draw(self, surface):
       pygame.draw.rect(surface, GREEN, (*self.position, BLOCK_SIZE, BLOCK_SIZE), border_radius=4)


class Button:
   def __init__(self, text, x, y, width, height, callback):
       self.text = text
       self.rect = pygame.Rect(x, y, width, height)
       self.color = GREY
       self.callback = callback


   def draw(self, surface):
       pygame.draw.rect(surface, self.color, self.rect, border_radius=6)
       label = FONT.render(self.text, True, BLACK)
       label_rect = label.get_rect(center=self.rect.center)
       surface.blit(label, label_rect)


   def is_clicked(self, pos):
       return self.rect.collidepoint(pos)


class Game:
   def __init__(self):
       self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
       pygame.display.set_caption("Snake Game")
       self.clock = pygame.time.Clock()
       self.best_score = 0
       self.snake_speed = 15
       self.selected_speed = 15


   def draw_text(self, text, font, color, pos):
       label = font.render(text, True, color)
       self.screen.blit(label, pos)


   def set_custom_speed(self):
       running = True
       input_text = ''
       while running:
           self.screen.fill(WHITE)
           self.draw_text("Enter custom speed (5-60):", FONT, BLACK, (WIDTH//4, HEIGHT//3))
           self.draw_text(input_text, LARGE_FONT, RED, (WIDTH//2 - 40, HEIGHT//2))
           pygame.display.flip()


           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                   pygame.quit()
                   sys.exit()
               elif event.type == pygame.KEYDOWN:
                   if event.key == pygame.K_RETURN:
                       try:
                           val = int(input_text)
                           if 5 <= val <= 60:
                               self.selected_speed = val
                               return
                       except:
                           pass
                   elif event.key == pygame.K_BACKSPACE:
                       input_text = input_text[:-1]
                   elif event.unicode.isdigit():
                       input_text += event.unicode


   def welcome_screen(self):
       button_width, button_height = 120, 40
       gap = 20
       total_width = 4 * button_width + 3 * gap
       start_x = (WIDTH - total_width) // 2
       y = HEIGHT // 2


       buttons = [
           Button("Easy", start_x, y, button_width, button_height, lambda: self.set_speed('Easy')),
           Button("Medium", start_x + (button_width + gap), y, button_width, button_height, lambda: self.set_speed('Medium')),
           Button("Hard", start_x + 2 * (button_width + gap), y, button_width, button_height, lambda: self.set_speed('Hard')),
           Button("Custom", start_x + 3 * (button_width + gap), y, button_width, button_height, self.set_custom_speed),
       ]


       while True:
           self.screen.fill(WHITE)
           self.draw_text("Welcome to Neon Snake", LARGE_FONT, BLUE, (WIDTH//6, HEIGHT//6))
           self.draw_text("Best Score: {}".format(self.best_score), FONT, RED, (WIDTH - 180, 20))
           self.draw_text("Select Difficulty:", FONT, BLACK, (WIDTH//2 - 100, HEIGHT//2 - 60))
           for btn in buttons:
               btn.draw(self.screen)
           pygame.display.flip()


           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                   pygame.quit()
                   sys.exit()
               if event.type == pygame.MOUSEBUTTONDOWN:
                   for btn in buttons:
                       if btn.is_clicked(event.pos):
                           btn.callback()
                           return
               if event.type == pygame.KEYDOWN:
                   if event.key == pygame.K_e:
                       self.set_speed('Easy')
                       return
                   if event.key == pygame.K_m:
                       self.set_speed('Medium')
                       return
                   if event.key == pygame.K_h:
                       self.set_speed('Hard')
                       return


   def set_speed(self, level):
       self.selected_speed = DIFFICULTY[level]


   def game_over_screen(self, score):
       buttons = [
           Button("Restart", 100, 280, 120, 40, lambda: "restart"),
           Button("Home", 240, 280, 120, 40, lambda: "home"),
           Button("Quit", 380, 280, 120, 40, lambda: "quit")
       ]


       while True:
           self.screen.fill(WHITE)
           self.draw_text("Game Over", LARGE_FONT, RED, (WIDTH//3, HEIGHT//4))
           self.draw_text("Score: {}".format(score), FONT, BLUE, (WIDTH//3, HEIGHT//2 - 30))
           self.draw_text("Choose an option:", FONT, BLACK, (WIDTH//3, HEIGHT//2 + 10))
           self.draw_text("Best Score: {}".format(self.best_score), FONT, RED, (WIDTH - 180, 20))
           for btn in buttons:
               btn.draw(self.screen)
           pygame.display.flip()


           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                   pygame.quit()
                   sys.exit()
               if event.type == pygame.MOUSEBUTTONDOWN:
                   for btn in buttons:
                       if btn.is_clicked(event.pos):
                           return btn.callback()
               if event.type == pygame.KEYDOWN:
                   if event.key == pygame.K_r:
                       return "restart"
                   if event.key == pygame.K_q:
                       return "quit"
                   if event.key == pygame.K_h:
                       return "home"


   def run(self):
       while True:
           self.welcome_screen()
           self.snake_speed = self.selected_speed


           play_game = True
           while play_game:
               snake = Snake()
               food = Food()
               score = 0


               while True:
                   self.screen.fill(WHITE)
                   for event in pygame.event.get():
                       if event.type == pygame.QUIT:
                           pygame.quit()
                           sys.exit()
                       if event.type == pygame.KEYDOWN:
                           if event.key == pygame.K_LEFT and snake.direction != [BLOCK_SIZE, 0]:
                               snake.direction = [-BLOCK_SIZE, 0]
                           elif event.key == pygame.K_RIGHT and snake.direction != [-BLOCK_SIZE, 0]:
                               snake.direction = [BLOCK_SIZE, 0]
                           elif event.key == pygame.K_UP and snake.direction != [0, BLOCK_SIZE]:
                               snake.direction = [0, -BLOCK_SIZE]
                           elif event.key == pygame.K_DOWN and snake.direction != [0, -BLOCK_SIZE]:
                               snake.direction = [0, BLOCK_SIZE]


                   snake.move()
                   if snake.get_head() == food.position:
                       snake.grow()
                       score += 1
                       food.respawn()


                   if snake.check_collision():
                       self.best_score = max(self.best_score, score)
                       choice = self.game_over_screen(score)
                       if choice == "restart":
                           break
                       elif choice == "home":
                           play_game = False
                           break
                       else:
                           pygame.quit()
                           sys.exit()


                   snake.draw(self.screen)
                   food.draw(self.screen)
                   self.draw_text("Score: {}".format(score), FONT, RED, (10, 10))
                   pygame.display.flip()
                   self.clock.tick(self.snake_speed)


if __name__ == '__main__':
   Game().run()
